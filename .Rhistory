filter(str_detect(ref.date, '2011'))
dat_2012 <- as.data.frame(l.out$df.tickers) %>%
select(ticker, ref.date, price.adjusted) %>%
filter(str_detect(ref.date, '2012'))
dat_2013 <- as.data.frame(l.out$df.tickers) %>%
select(ticker, ref.date, price.adjusted) %>%
filter(str_detect(ref.date, '2013'))
dat_2014 <- as.data.frame(l.out$df.tickers) %>%
select(ticker, ref.date, price.adjusted) %>%
filter(str_detect(ref.date, '2014'))
dat_2015 <- as.data.frame(l.out$df.tickers) %>%
select(ticker, ref.date, price.adjusted) %>%
filter(str_detect(ref.date, '2015'))
dat_2016 <- as.data.frame(l.out$df.tickers) %>%
select(ticker, ref.date, price.adjusted) %>%
filter(str_detect(ref.date, '2016'))
dat_2017 <- as.data.frame(l.out$df.tickers) %>%
select(ticker, ref.date, price.adjusted) %>%
filter(str_detect(ref.date, '2017'))
dat_2018 <- as.data.frame(l.out$df.tickers) %>%
select(ticker, ref.date, price.adjusted) %>%
filter(str_detect(ref.date, '2018'))
p <- ggplot(l.out$df.tickers, aes(x = ref.date, y = price.close))
dat_2019 <- as.data.frame(l.out$df.tickers) %>%
select(ticker, ref.date, price.adjusted) %>%
filter(str_detect(ref.date, '2019'))
View(dat_2019)
dat_2004 <- as.data.frame(l.out$df.tickers) %>%
select(ticker, price.adjusted) %>%
filter(str_detect(ref.date, '2004')) %>%
spread(key = ticker, price.adjusted, fill = NA)
dat_2004 <- as.data.frame(l.out$df.tickers) %>%
filter(str_detect(ref.date, '2004')) %>%
select(ticker,  ref.date, price.adjusted) %>%
spread(key = ticker, price.adjusted, fill = NA)
dat_2004 <- as.data.frame(l.out$df.tickers) %>%
filter(str_detect(ref.date, '2004')) %>%
select(ticker,  ref.date, price.adjusted) %>%
spread(key = ticker, price.adjusted, fill = NA) %>%
select(-ref.date)
dat <- as.data.frame(l.out$df.tickers) %>%
select(ticker,  ref.date, price.adjusted) %>%
spread(key = ticker, price.adjusted, fill = NA) %>%
select(-ref.date)
View(dat)
# Computing the correlation matrix
cormat <- round(cor(dat),2)
View(cormat)
# "melting" the data for the heat map
melted_cormat <- melt(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Helper function to reorder the correlation matrix
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reordered correlation data visualization
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
?melt
??melt
install.packages("reshape2")
library(reshape2) # Used to melt the data
## This section puts the data into a clean format. Each ticker is a column. The dates are from Jan 1, 2014 - Jan 1, 2019.
dat <- as.data.frame(l.out$df.tickers) %>%
select(ticker,  ref.date, price.adjusted) %>%
spread(key = ticker, price.adjusted, fill = NA) %>%
select(-ref.date)
# Computing the correlation matrix
cormat <- round(cor(dat),2)
# "melting" the data for the heat map
melted_cormat <- melt(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Helper function to reorder the correlation matrix
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reordered correlation data visualization
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
print(ggheatmap)
tickers <- c('GILD','UNP','UTX','HPQ', 'V', 'CSCO', 'SLB', 'AMGN', 'BA', 'COP', 'CMCSA', 'BMY', 'VZ', 'T', 'UNH', 'MCD', 'PFE', 'ABT', 'FB', 'DIS')
first.date <- Sys.Date() - 5496
last.date <- Sys.Date()
freq.data <- 'monthly'
tickers <- c('GILD','UNP','UTX','HPQ', 'V', 'CSCO', 'SLB', 'AMGN', 'BA', 'COP', 'CMCSA', 'BMY', 'VZ', 'T', 'UNH', 'MCD', 'PFE', 'ABT', 'FB', 'DIS')
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date,
freq.data = freq.data,
cache.folder = file.path(tempdir(),
'BGS_Cache') ) # cache in tempdir()
tickers <- c('GILD','UNP','UTX','HPQ', 'MMM', 'CSCO', 'SLB', 'AMGN', 'BA', 'COP', 'CMCSA', 'BMY', 'VZ', 'T', 'UNH', 'MCD', 'PFE', 'ABT', 'ORCL', 'DIS')
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date,
freq.data = freq.data,
cache.folder = file.path(tempdir(),
'BGS_Cache') ) # cache in tempdir()
## This section puts the data into a clean format. Each ticker is a column. The dates are from Jan 1, 2014 - Jan 1, 2019.
dat <- as.data.frame(l.out$df.tickers) %>%
select(ticker,  ref.date, price.adjusted) %>%
spread(key = ticker, price.adjusted, fill = NA) %>%
select(-ref.date)
# Computing the correlation matrix
cormat <- round(cor(dat),2)
# "melting" the data for the heat map
melted_cormat <- melt(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Helper function to reorder the correlation matrix
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reordered correlation data visualization
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
print(ggheatmap)
tickers <- c('GILD','UNP','UTX','HPQ', 'MMM', 'CSCO', 'SLB', 'AMGN', 'BA', 'COP', 'CMCSA', 'BMY', 'VZ', 'T', 'PEP', 'MCD', 'PFE', 'ABT', 'ORCL', 'DIS')
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date,
freq.data = freq.data,
cache.folder = file.path(tempdir(),
'BGS_Cache') ) # cache in tempdir()
## This section puts the data into a clean format. Each ticker is a column. The dates are from Jan 1, 2014 - Jan 1, 2019.
dat <- as.data.frame(l.out$df.tickers) %>%
select(ticker,  ref.date, price.adjusted) %>%
spread(key = ticker, price.adjusted, fill = NA) %>%
select(-ref.date)
# Computing the correlation matrix
cormat <- round(cor(dat),2)
# "melting" the data for the heat map
melted_cormat <- melt(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Helper function to reorder the correlation matrix
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reordered correlation data visualization
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
print(ggheatmap)
tickers <- c('GILD','UNP','PCY','HPQ', 'MMM', 'CSCO', 'SLB', 'AMGN', 'BA', 'COP', 'CMCSA', 'BMY', 'VZ', 'T', 'PEP', 'MCD', 'PFE', 'ABT', 'ORCL', 'DIS')
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date,
freq.data = freq.data,
cache.folder = file.path(tempdir(),
'BGS_Cache') ) # cache in tempdir()
tickers <- c('GILD','UNP','MCD','HPQ', 'MMM', 'CSCO', 'SLB', 'AMGN', 'BA', 'COP', 'CMCSA', 'BMY', 'VZ', 'T', 'PEP', 'MCD', 'PFE', 'ABT', 'ORCL', 'DIS')
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date,
freq.data = freq.data,
cache.folder = file.path(tempdir(),
'BGS_Cache') ) # cache in tempdir()
## This section puts the data into a clean format. Each ticker is a column. The dates are from Jan 1, 2014 - Jan 1, 2019.
dat <- as.data.frame(l.out$df.tickers) %>%
select(ticker,  ref.date, price.adjusted) %>%
spread(key = ticker, price.adjusted, fill = NA) %>%
select(-ref.date)
# Computing the correlation matrix
cormat <- round(cor(dat),2)
# "melting" the data for the heat map
melted_cormat <- melt(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Helper function to reorder the correlation matrix
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reordered correlation data visualization
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
print(ggheatmap)
# Reordered correlation data visualization
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
#coord_fixed()
print(ggheatmap)
# Reordered correlation data visualization
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
print(ggheatmap)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_bw()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
print(ggheatmap)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_bw()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
labs(x = "", y = "") +
coord_fixed()
print(ggheatmap)
install.packages("dygraphs")
install.packages("tidyquant")
chickwts
View(chickwts)
chick <- chickwts
View(chick)
chick <- chickwts %>%
spread(key = feed, weight, fill = NA)
View(chick)
chick <- chickwts %>%
spread(key = feed, weight)
chick <- chickwts %>%
spread(key = feed, weight)
chick <- chickwts %>%
spread(key = weight, feed)
library(tidyr)
chick <- chickwts %>%
spread(key = feed, weight)
View(dat)
View(dat_2006)
View(dat_2004)
cormat <- round(cor(dat_2004),2)
View(cormat)
# "melting" the data for the heat map
melted_cormat <- melt(cormat)
View(melted_cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
View(melted_cormat)
# Helper function to reorder the correlation matrix
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reordered correlation data visualization
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
View(cormat)
View(melted_cormat)
dat_2004 <- as.data.frame(l.out$df.tickers) %>%
filter(str_detect(ref.date, '2004')) %>%
select(ticker,  ref.date, price.adjusted) %>%
spread(key = ticker, price.adjusted, fill = NA) %>%
select(-ref.date)
# Computing the correlation matrix
cormat <- round(cor(dat_2004),2)
# "melting" the data for the heat map
melted_cormat <- melt(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
#upper_tri
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
View(melted_cormat)
dat_04 <- melted_cormat %>%
cbind(year = "2004")
View(dat_04)
dat_2005 <- as.data.frame(l.out$df.tickers) %>%
filter(str_detect(ref.date, '2005')) %>%
select(ticker,  ref.date, price.adjusted) %>%
spread(key = ticker, price.adjusted, fill = NA) %>%
select(-ref.date)
# Computing the correlation matrix
cormat <- round(cor(dat_2005),2)
# "melting" the data for the heat map
melted_cormat <- melt(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
#upper_tri
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Adding a column with the year
dat_05 <- melted_cormat %>%
cbind(year = "2005")
View(dat_05)
dat_2006 <- as.data.frame(l.out$df.tickers) %>%
filter(str_detect(ref.date, '2006')) %>%
select(ticker,  ref.date, price.adjusted) %>%
spread(key = ticker, price.adjusted, fill = NA) %>%
select(-ref.date)
# Computing the correlation matrix
cormat <- round(cor(dat_2006),2)
# "melting" the data for the heat map
melted_cormat <- melt(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
#upper_tri
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Adding a column with the year
dat_06 <- melted_cormat %>%
cbind(year = "2006")
View(dat_06)
lit_dat <- bind_rows(dat_04, dat_05, dat_06)
View(lit_dat)
